"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('../lib/version', () => ({
    versionNumber: mockVersionNumber,
}));
const os = require("os");
const path = require("path");
const cxapi = require("@aws-cdk/cx-api");
const fs = require("fs-extra");
const init_1 = require("../lib/init");
cliTest('create a TypeScript library project', async (workDir) => {
    await init_1.cliInit('lib', 'typescript', false, undefined /* canUseNetwork */, workDir);
    // Check that package.json and lib/ got created in the current directory
    expect(await fs.pathExists(path.join(workDir, 'package.json'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, 'lib'))).toBeTruthy();
});
cliTest('create a TypeScript app project', async (workDir) => {
    await init_1.cliInit('app', 'typescript', false, undefined /* canUseNetwork */, workDir);
    // Check that package.json and bin/ got created in the current directory
    expect(await fs.pathExists(path.join(workDir, 'package.json'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, 'bin'))).toBeTruthy();
});
cliTest('create a JavaScript app project', async (workDir) => {
    await init_1.cliInit('app', 'javascript', false, undefined /* canUseNetwork */, workDir);
    // Check that package.json and bin/ got created in the current directory
    expect(await fs.pathExists(path.join(workDir, 'package.json'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, 'bin'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, '.git'))).toBeTruthy();
});
cliTest('--generate-only should skip git init', async (workDir) => {
    await init_1.cliInit('app', 'javascript', false, true, workDir);
    // Check that package.json and bin/ got created in the current directory
    expect(await fs.pathExists(path.join(workDir, 'package.json'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, 'bin'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, '.git'))).toBeFalsy();
});
cliTest('git directory does not throw off the initer!', async (workDir) => {
    fs.mkdirSync(path.join(workDir, '.git'));
    await init_1.cliInit('app', 'typescript', false, undefined /* canUseNetwork */, workDir);
    // Check that package.json and bin/ got created in the current directory
    expect(await fs.pathExists(path.join(workDir, 'package.json'))).toBeTruthy();
    expect(await fs.pathExists(path.join(workDir, 'bin'))).toBeTruthy();
});
test('verify "future flags" are added to cdk.json', async () => {
    // This is a lot to test, and it can be slow-ish, especially when ran with other tests.
    jest.setTimeout(30000);
    for (const templ of await init_1.availableInitTemplates) {
        for (const lang of templ.languages) {
            await withTempDir(async (tmpDir) => {
                await init_1.cliInit(templ.name, lang, 
                /* canUseNetwork */ false, 
                /* generateOnly */ true, tmpDir);
                // ok if template doesn't have a cdk.json file (e.g. the "lib" template)
                if (!await fs.pathExists(path.join(tmpDir, 'cdk.json'))) {
                    return;
                }
                const config = await fs.readJson(path.join(tmpDir, 'cdk.json'));
                const context = config.context || {};
                for (const [key, expected] of Object.entries(cxapi.FUTURE_FLAGS)) {
                    const actual = context[key];
                    expect(actual).toEqual(expected);
                }
            });
        }
    }
});
function cliTest(name, handler) {
    test(name, () => withTempDir(handler));
}
async function withTempDir(cb) {
    const tmpDir = await fs.mkdtemp(path.join(os.tmpdir(), 'aws-cdk-test'));
    try {
        await cb(tmpDir);
    }
    finally {
        await fs.remove(tmpDir);
    }
}
/**
 * The init templates rely on parsing the current major version to find the correct template directory.
 * During tests, the current package version is '0.0.0', rather than a specific version.
 * The below mocks the versionNumber to return the same major version as the current release.
 */
function mockVersionNumber() {
    // eslint-disable-next-line @typescript-eslint/no-require-imports
    const releaseJson = require(`${__dirname}/../../../release.json`);
    return `${releaseJson.majorVersion}.0.0`;
}
//# sourceMappingURL=data:application/json;base64,